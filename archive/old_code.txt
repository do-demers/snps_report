var temp1 = _.pluck(data, keys[0]);

var temp2 = _.map(states, (state, i) => {
						return {
							key: state,
							value: temp1[i]
							}
						});
						
						var result = Object.keys(data).map(key => ({ key, value: data[key] }));
						
						
						
function transpose(a) {
    return Object.keys(a[0]).map(function(c) {
        return a.map(function(r) { return [c]; });
    });
}

var temp4 = transpose(data);
var temp5 = Object.keys(temp4);
var key = "name";
var person = {[keys[0]]:"John"};

var temp6 =  _.map( columns, (col,j) => { return {
							Category:  keys[j],
							[states[j]]: "bb"
						}
				});
				
				var transposed_data = _.map(data, (state, i) =>  {
						
						
						var state_val = states[i];
						var temp_key =keys[i]
						
						
						debugger;
						return {
							key: state_val,
							value: state[keys[i]]
							}
						});
						
						
						
						
	x0.domain(data.map(function(d) { ;return d.State; }));
	x1.domain(keys).rangeRound([0, x0.bandwidth()]);
	y.domain([0, d3.max(data, function(d) { return d3.max(keys, function(key) { return d[key]; }); })]).nice();

  g.append("g")
    .selectAll("g")
    .data(data)
    .enter().append("g")
      .attr("transform", function(d) { return "translate(" + x0(d.State) + ",0)"; })
    .selectAll("rect")
    .data(function(d) { return keys.map(function(key) { return {key: key, value: d[key]}; }); })
    .enter().append("rect")
      .attr("x", function(d) { return x1(d.key); })
      .attr("y", function(d) { return y(d.value); })
      .attr("width", x1.bandwidth())
      .attr("height", function(d) { return height - y(d.value); })
      .attr("fill", function(d) { return z(d.key); });
	  
	  
	  					var current_states = _.map(d3.select("#sel_states").property("selectedOptions"), x => x.value);
						debugger;
						
						var new_TBL_data =  _.where(data, {State: start_state});
						

												
					
						debugger;
